name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run Bandit (SAST)
      run: bandit -r app/ -f json -o bandit-results.json
    
    - name: Check for vulnerable dependencies
      run: safety check -r requirements.txt
  
  test:
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run tests with coverage
      run: pytest --cov=app tests/
  
  docker-build-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2
    
    - name: Build Docker image
      run: docker build -t secure-app:${{ github.sha }} .
    
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'secure-app:${{ github.sha }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  # In a real project, you would add deployment steps here
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: docker-build-scan
  #   steps:
  #   - name: Deploy to production
  #     run: echo "Deploying to production..."